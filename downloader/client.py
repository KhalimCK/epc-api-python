import os
import base64
import downloader.exceptions as exceptions


class EpcClient:
    auth_token, headers, api_key, user_email = (None, ) * 4

    def __init__(self, auth_token=None, user_email=None, api_key=None):
        """
        To authenticate with this api, an auth token is generated by Base64-encoding the string
        <user_email>:<api_key> and therefore when initialising this client, the user can either pass the
        auth_token or the user_email and the api_key
        """

        # Attempt to set auth token
        self.set_auth_token(auth_token)

        if self.auth_token is None:
            # Otherwise, we generate auth_token from user_email and api_key
            self._set_user_email(user_email)
            self._set_api_key(api_key)
            self._create_auth_token()

        # For the moment, the only format we allow is .zip
        self.accept = "application/zip"

        # Set up headers
        self._set_headers()

    def set_auth_token(self, auth_token):
        if not auth_token:
            auth_token = os.getenv("EPC_USER_EMAIL")
        self.auth_token = auth_token

    def _create_auth_token(self):
        self.auth_token = base64.b64encode(":".join([self.user_email, self.api_key]).encode("utf-8"))

    def _set_user_email(self, user_email):
        """
        Utility function which sets the value of user_email. If not set, lookes for EPC_USER_EMAIL in the environment
        """

        if not user_email:
            user_email = os.getenv("EPC_USER_EMAIL")

        self.user_email = user_email

        if not self.user_email:
            raise exceptions.MissingAuth(
                "user_email not passed and could not be found as EPC_USER_EMAIL in environment"
            )

    def _set_api_key(self, api_key):
        """
        Utility function which sets the value of api_key. If not set, lookes for EPC_API_KEY in the environment
        """

        if not api_key:
            api_key = os.getenv("EPC_API_KEY")

        self.api_key = api_key

        if not self.api_key:
            raise exceptions.MissingAuth(
                "api_key not passed and could not be found as EPC_API_KEY in environment"
            )

    def _set_headers(self):
        self.headers = {
            "Authorization": "Basic {auth_token}".format(auth_token=self.auth_token),
            "Accept": self.accept
        }

